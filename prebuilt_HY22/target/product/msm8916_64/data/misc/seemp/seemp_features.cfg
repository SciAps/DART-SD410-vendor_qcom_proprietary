version 1.0.0;

feature Comm_Rate[BF]: volume_rate
    action add_to_volume_rate_from_len:
        kernel::sendto;
    action add_to_volume_rate_from_size:
        kernel::recvfrom;

feature Comm_Instantaneous[BF]: volume_instantaneous[1]
    action add_to_volume_instantaneous_from_len:
        kernel::sendto;
    action add_to_volume_instantaneous_from_size:
        kernel::recvfrom;

feature UserInteraction[BF]: amount
    action increment_amount:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;

// feature DeviceInfo[BF]: existence
//     action set_flag:
//         TelephonyManager::getDeviceId, getLine1Number, getSimSerialNumber, getSubscriberId;
//         PhoneNumberUtils::getNumberFromIntent, getDeviceSoftwareVersion, getVoiceMailAlphaTag;
// YC: changed from existence -> amount
feature DeviceInfoNeutral[BF]: amount
    action increment_amount:
        PhoneNumberUtils::getDeviceSoftwareVersion;
        android.provider.Settings::get<ANDROID_ID>;


feature DeviceInfo[BF]: amount
    action increment_amount:
        TelephonyManager::getDeviceId, getSimSerialNumber;

feature DeviceInfoPhoneNumber[BF]: amount
    action increment_amount:
        TelephonyManager::getLine1Number;
        PhoneNumberUtils::getNumberFromIntent;

feature Call[BF]: amount
    action increment_amount:
        Telephony::query;
        CallerInfo::getCallerId, getCallerInfo;
    action increment_amount_by_parameter_string_cmp("content://call_log/"):
        ContentResolver::query;

feature UserAccount[BF]: existence
    action set_flag:
        AccountManagerService::getPassword, getUserData, addAccount, removeAccount,
              setPassword, clearPassword, setUserData, editProperties;
        AccountManager::getPassword, getUserData, addAccountExplicitly, removeAccount,
              setPassword, clearPassword, setUserData, addAccount, editProperties, doWork;

feature NoUserInteractionBeforeUserAccount[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action handle_event:
        AccountManagerService::getPassword, getUserData, addAccount, removeAccount,
              setPassword, clearPassword, setUserData, editProperties;
        AccountManager::getPassword, getUserData, addAccountExplicitly, removeAccount,
              setPassword, clearPassword, setUserData, addAccount, editProperties, doWork;

feature BrowserInfo[BF]: existence
    action set_flag:
        Browser::addSearchUrl, canClearHistory, ClearHistory, deleteFromHistory, deleteHistoryTimeFrame,
              deleteHistoryWhere, getAllBookmarks, getAllVisitedUrls, getVisitedHistory, getVisitedLike,
              requestAllIcons, truncateHistory, updateVisitedHistory, clearSearches;
        WebIconDatabase::bulkRequestIconForPageUrl;
    action set_flag_by_parameter_string_cmp("content://browser/"):
        ContentResolver::query;
    action set_flag_by_parameter_string_cmp("content://com.android.browser/"):
        ContentResolver::query;

feature NoUserInteractionBeforeBrowserInfo[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action handle_event:
        Browser::addSearchUrl, canClearHistory, ClearHistory, deleteFromHistory, deleteHistoryTimeFrame,
              deleteHistoryWhere, getAllBookmarks, getAllVisitedUrls, getVisitedHistory, getVisitedLike,
              requestAllIcons, truncateHistory, updateVisitedHistory, clearSearches;
        WebIconDatabase::bulkRequestIconForPageUrl;
    action handle_event_by_parameter_string_cmp("content://browser/"):
        ContentResolver::query;
    action handle_event_by_parameter_string_cmp("content://com.android.browser/"):
        ContentResolver::query;

feature InstallShortcut[BF]: amount
    action increment_amount_by_parameter_string_cmp("favicon="): // no reason to distinguish between shortcuts and browser bookmarks
        ContentResolver::insert;

feature NoUserInteractionBeforeInstallShortcut[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action handle_event_by_parameter_string_cmp("favicon="):
        ContentResolver::insert;

feature Calendar[BF]: existence
    action set_flag:
        CalendarContract::insert, alarmExists, findNextAlarmTime, query;

feature NoUserInteractionBeforeInsertCalendar[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action handle_event:
        CalendarContract::insert;

feature Location[BF]: amount
    action increment_amount:
        LocationManager::_requestLocationUpdates, addGpsStatusListener, addNmeaListener,
              addProximityAlert, getBestProvider, getLastKnownLocation, getProvider, getProviders, isProviderEnabled,
              requestLocationUpdates, sendExtraCommand;
        TelephonyManager::getCellLocation, getNeighboringCellInfo;
        GeolocationService::registerForLocationUpdates,
              setEnableGps, start;
        WebChromeClient::onGeolocationPermissionsShowPrompt;
        WifiManager::getScanResults;

feature NFC[BF]: amount
// TODO: add update handlers for Feature_NFC

feature Bluetooth[BF]: amount
    action increment_amount:
        android.bluetooth.BluetoothAdapter::enable, disable, startDiscovery,
              listenUsingInsecureRfcommWithServiceRecord, listenUsingSecureRfcommWithServiceRecord,
              getBondedDevices, getRemoteDevice, getState, getProfileConnectionState;

feature CameraPhoto[BF]: amount
    action increment_amount:
        Camera::takePicture;

// TODO: Picture communication - If the number of bytes < THRESH then it is a false positive... ignore
feature CameraPhotoComm[BF]: order
    action move_to_first:
        Camera::takePicture;
    action move_to_second:
        kernel::sendto[1024];

feature NoUserInteractionBeforeCameraPhoto[BF]: order_with_lag[15]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action handle_event:
        Camera::takePicture;

feature NoUserInteractionBeforeCameraPhotoComm[BF]: order_no_ui_lag[15]
    action restart_lag_no_ui:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action move_to_first_no_ui:
        Camera::takePicture;
    action move_to_second_no_ui:
        kernel::sendto[1024];


// TODO: change Feature_CameraVideo to track duration of videos
//       The Feature 2[BF]: Cumulative length of video recording
/* TODO: issue BVs every second after start. This will be stopped once a stop is seen */
// TODO: Video communication - If the number of bytes < THRESH then it is a false positive... ignore
feature CameraVideo[BF]: amount
    action increment_amount:
        MediaRecorder::start;

feature CameraVideoComm[BF]: order
    action move_to_first:
        MediaRecorder::start;
    action move_to_second:
        kernel::sendto[1024];

feature NoUserInteractionBeforeCameraVideo[BF]: order_with_lag[15]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action handle_event:
        MediaRecorder::start;

feature NoUserInteractionBeforeCameraVideoComm[BF]: order_no_ui_lag[15]
    action restart_lag_no_ui:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action move_to_first_no_ui:
        MediaRecorder::start;
    action move_to_second_no_ui:
        kernel::sendto[1024];

/* TODO: change to cumulative length of audio recording */
/* TODO: issue BVs every second after startRecording. This will be stopped once a stop is seen */
feature RecordAudio[BF]: existence
    action set_flag:
        AudioRecord::startRecording;
        SpeechRecognizer::startListening;

feature RecordAudioComm[BF]: order
    action move_to_first:
        AudioRecord::startRecording;
        SpeechRecognizer::startListening;
    action move_to_second:
        kernel::sendto[1024];

feature NoUserInteractionBeforeRecordAudio[BF]: order_with_lag[15]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action handle_event:
        AudioRecord::startRecording;
        SpeechRecognizer::startListening;

feature NoUserInteractionBeforeRecordAudioComm[BF]: order_no_ui_lag[15]
    action restart_lag_no_ui:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action move_to_first_no_ui:
        AudioRecord::startRecording;
        SpeechRecognizer::startListening;
    action move_to_second_no_ui:
        kernel::sendto[8];

feature SendSMS[BF]: amount
    action increment_amount:
        android.telephony.SmsManager::sendDataMessage, sendMultipartTextMessage, sendTextMessage;
        android.telephony.gsm.SmsManager::sendDataMessage, sendMultipartTextMessage, sendTextMessage;

feature NoUserInteractionBeforeSendSMS[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action handle_event:
        android.telephony.SmsManager::sendDataMessage, sendMultipartTextMessage, sendTextMessage;
        android.telephony.gsm.SmsManager::sendDataMessage, sendMultipartTextMessage, sendTextMessage;

// TODO: hook the SMS_DELIVER_ACTION and SMS_RECEIVED_ACTION intents
feature ReadSMS[BF]: amount
    action increment_amount:
        android.telephony.SmsManager::copyMessageToIcc, deleteMessageFromIcc, updateMessageOnIcc;
        android.telephony.gsm.SmsManager::copyMessageToSim, deleteMessageFromSim, updateMessageOnSim, getAllMessagesFromSim;
    action increment_amount_by_parameter_string_cmp("content://mms-sms/"):
        ContentResolver::query;
    action increment_amount_by_parameter_string_cmp("content://sms/"):
        ContentResolver::query;

feature NoUserInteractionBeforeReadSMS[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action handle_event:
        android.telephony.SmsManager::copyMessageToIcc, deleteMessageFromIcc, updateMessageOnIcc;
        android.telephony.gsm.SmsManager::copyMessageToSim, deleteMessageFromSim, updateMessageOnSim, getAllMessagesFromSim;
    action handle_event_by_parameter_string_cmp("content://sms/" | "content://mms-sms/"):
        ContentResolver::query;

feature Accelerometer[BF]: amount
    action increment_amount:
        android.hardware.SensorEventListener::onAccuracyChanged<ACCELEROMETER>, onSensorChanged<ACCELEROMETER>;

feature ReceiveMMS[BF]: amount
// TODO: implement update handlers for Feature_ReceiveMMS
//       by hooking the WAP_PUSH_DELIVER_ACTION intent
    action increment_amount_by_parameter_string_cmp("content://mms-sms/"):
        ContentResolver::query;
    action increment_amount_by_parameter_string_cmp("content://mms/"):
        ContentResolver::query;

feature NoUserInteractionBeforeReceiveMMS[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action handle_event_by_parameter_string_cmp("content://mms/"):
        ContentResolver::query;

// feature ContactList[BF]: existence
//     action set_flag:
//         ContactsContract::getLookupUri, lookupContact, openContactPhotoInputStream, getContactLookupUri;

feature ContactList[BF]: amount
    action increment_amount:
        ContactsContract::getLookupUri, lookupContact, openContactPhotoInputStream, getContactLookupUri;
    action increment_amount_by_parameter_string_cmp("content://contacts/"):
        ContentResolver::query;
    action increment_amount_by_parameter_string_cmp("content://com.android.contacts/"):
        ContentResolver::query;

feature NoUserInteractionBeforeContactList[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action handle_event:
        ContactsContract::getLookupUri, lookupContact, openContactPhotoInputStream, getContactLookupUri;
    action handle_event_by_parameter_string_cmp("content://contacts/"):
        ContentResolver::query;
    action handle_event_by_parameter_string_cmp("content://com.android.contacts/"):
        ContentResolver::query;

feature Installation[BF]: existence
    action set_flag:
        PackageManagerService::installPackage;

feature NoUserInteractionBeforeInstallation[BF]: order_with_lag[1]
    action restart_lag:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action handle_event:
        PackageManagerService::installPackage;

feature DeviceIdNeutralComm[BF]: order
    action move_to_first:
        PhoneNumberUtils::getDeviceSoftwareVersion;
        android.provider.Settings::get<ANDROID_ID>;
    action move_to_second:
        kernel::sendto[8];

feature DeviceIdComm[BF]: order
    action move_to_first:
        TelephonyManager::getDeviceId, getSimSerialNumber;
    action move_to_second:
        kernel::sendto[8];

feature DeviceIdPhoneNumberComm[BF]: order
    action move_to_first:
        TelephonyManager::getLine1Number;
        PhoneNumberUtils::getNumberFromIntent;
    action move_to_second:
        kernel::sendto[8];

feature UserAccountComm[BF]: order
    action move_to_first:
        AccountManager::addAccount, clearPassword, confirmCredentials, editProperties, invalidateAuthToken,
              removeAccount, updateCredentials, doWork, checkManageAccountsOrUseCredentialsPermissions,
              checkManageAccountsPermission, clearPassword, confirmCredentials, editProperties, invalidateAuthToken,
              removeAccount, updateCredentials, addAccountExplicitly, getPassword, getUserData, peekAuthToken,
              setAuthToken, setUserData, setPassword, checkAuthenticateAccountsPermission, getPassword,
              getUserData, peekAuthToken, setAuthToken, setPassword, setUserData;
    action move_to_second:
        kernel::sendto[8];

feature BrowserContentComm[BF]: order
    action move_to_first:
        Browser::getAllBookmarks, getAllVisitedUrls, getVisitedLike, getVisitedHistory,
              addSearchUrl, requestAllIcons;
    action move_to_first_by_parameter_string_cmp("content://browser/"):
        ContentResolver::query;
    action move_to_first_by_parameter_string_cmp("content://com.android.browser/"):
        ContentResolver::query;
    action move_to_second:
        kernel::sendto[8];

feature NoUserInteractionBeforeBrowserContentComm[BF]: order_no_ui_lag[1]
    action restart_lag_no_ui:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action move_to_first_no_ui:
        Browser::getAllBookmarks, getAllVisitedUrls, getVisitedLike, getVisitedHistory,
              addSearchUrl, requestAllIcons;
    action move_to_first_no_ui_by_parameter_string_cmp("content://browser/"):
        ContentResolver::query;
    action move_to_first_no_ui_by_parameter_string_cmp("content://com.android.browser/"):
        ContentResolver::query;
    action move_to_second_no_ui:
        kernel::sendto[8];

feature CalendarComm[BF]: order
    action move_to_first:
        CalendarContract::insert, alarmExists, findNextAlarmTime, query;
    action move_to_second:
        kernel::sendto[8];

feature LocationComm_Rate[BF]: order_rate
    action move_to_first_rate:
        LocationManager::_requestLocationUpdates, addGpsStatusListener, addNmeaListener,
              addProximityAlert, getBestProvider, getLastKnownLocation, getProvider, getProviders, isProviderEnabled,
              requestLocationUpdates, sendExtraCommand;
        TelephonyManager::getCellLocation, getNeighboringCellInfo;
        GeolocationService::registerForLocationUpdates,
              setEnableGps, start;
        WebChromeClient::onGeolocationPermissionsShowPrompt;
        WifiManager::getScanResults;
    action move_to_second_rate:
        kernel::sendto[8];

feature LocationComm_Instantaneous[BF]: order_instantaneous[60]
    action move_to_first_instantaneous:
        LocationManager::_requestLocationUpdates, addGpsStatusListener, addNmeaListener,
              addProximityAlert, getBestProvider, getLastKnownLocation, getProvider, getProviders, isProviderEnabled,
              requestLocationUpdates, sendExtraCommand;
        TelephonyManager::getCellLocation, getNeighboringCellInfo;
        GeolocationService::registerForLocationUpdates,
              setEnableGps, start;
        WebChromeClient::onGeolocationPermissionsShowPrompt;
        WifiManager::getScanResults;
    action move_to_second_instantaneous:
        kernel::sendto[8];

feature AccelerometerComm[BF]: order
    action move_to_first:
        android.hardware.SensorEventListener::onAccuracyChanged<ACCELEROMETER>, onSensorChanged<ACCELEROMETER>;
    action move_to_second:
        kernel::sendto[8];

feature ContactListComm[BF]: order
    action move_to_first:
        ContactsContract::getLookupUri, lookupContact, openContactPhotoInputStream, getContactLookupUri;
    action move_to_first_by_parameter_string_cmp("content://contacts/"):
        ContentResolver::query;
    action move_to_first_by_parameter_string_cmp("content://com.android.contacts/"):
        ContentResolver::query;
    action move_to_second:
        kernel::sendto[8];

feature NoUserInteractionBeforeContactListComm[BF]: order_no_ui_lag[1]
    action restart_lag_no_ui:
        View::onTouchEvent, onKeyDown, onKeyUp, onTrackBallEvent;
    action move_to_first_no_ui:
        ContactsContract::getLookupUri, lookupContact, openContactPhotoInputStream, getContactLookupUri;
    action move_to_first_no_ui_by_parameter_string_cmp("content://contacts/"):
        ContentResolver::query;
    action move_to_first_no_ui_by_parameter_string_cmp("content://com.android.contacts/"):
        ContentResolver::query;
    action move_to_second_no_ui:
        kernel::sendto[8];

feature CompassComm[BF]: order
    action move_to_first:
        android.hardware.SensorEventListener::onAccuracyChanged<ORIENTATION>, onSensorChanged<ORIENTATION>;
    action move_to_second:
        kernel::sendto[8];

feature GyroscopeComm[BF]: order
    action move_to_first:
        android.hardware.SensorEventListener::onAccuracyChanged<ORIENTATION>, onSensorChanged<ORIENTATION>;
    action move_to_second:
        kernel::sendto[8];

feature ReadRotationSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<ACCELEROMETER_ROTATION>, get<USER_ROTATION>;

feature ReadDebugSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<ADB_ENABLED>, get<DEBUG_APP>, get<WAIT_FOR_DEBUGGER>;

feature ReadAirplaneModeSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<AIRPLANE_MODE_ON>, get<AIRPLANE_MODE_RADIOS>;

feature ReadAlarmSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<ALARM_ALERT>, get<NEXT_ALARM_FORMATTED>;

feature ReadRuntimeSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<ALWAYS_FINISH_ACTIVITIES>;

feature ReadDeviceIdSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<ANDROID_ID>, get<LOGGING_ID>;

feature ReadUISettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<ANIMATOR_DURATION_SCALE>, get<WINDOW_ANIMATION_SCALE>,
              get<FONT_SCALE>, get<SCREEN_BRIGHTNESS>, get<SCREEN_BRIGHTNESS_MODE>, get<SCREEN_BRIGHTNESS_MODE_AUTOMATIC>,
              get<SCREEN_BRIGHTNESS_MODE_MANUAL>, get<SCREEN_OFF_TIMEOUT>, get<DIM_SCREEN>, get<TRANSITION_ANIMATION_SCALE>,
              get<STAY_ON_WHILE_PLUGGED_IN>, get<WALLPAPER_ACTIVITY>, get<SHOW_PROCESSES>, get<SHOW_WEB_SUGGESTIONS>,
              get<SHOW_GTALK_SERVICE_STATUS>, get<USE_GOOGLE_MAIL>;

feature ReadDateTimeSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<AUTO_TIME>, get<AUTO_TIME_ZONE>, get<DATE_FORMAT>,
              get<TIME_12_24>;

feature ReadBluetoothSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<BLUETOOTH_DISCOVERABILITY>, get<BLUETOOTH_DISCOVERABILITY_TIMEOUT>,
              get<BLUETOOTH_ON>;

feature ReadDeviceInitializationSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<DEVICE_PROVISIONED>, get<SETUP_WIZARD_HAS_RUN>;

feature ReadDialerSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<DTMF_TONE_WHEN_DIALING>, get<END_BUTTON_BEHAVIOR>,
              get<RINGTONE>, get<MODE_RINGER>;

feature ReadAppMarketSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<INSTALL_NON_MARKET_APPS>;

feature ReadLocationSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<LOCATION_PROVIDERS_ALLOWED>;

feature ReadScreenLockSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<LOCK_PATTERN_ENABLED>, get<LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED>,
              get<LOCK_PATTERN_VISIBLE>;

feature ReadNetworkSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<NETWORK_PREFERENCE>, get<DATA_ROAMING>, get<HTTP_PROXY>;

feature ReadParentalControlSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<PARENTAL_CONTROL_ENABLED>, get<PARENTAL_CONTROL_LAST_UPDATE>,
              get<PARENTAL_CONTROL_REDIRECT_URL>;

feature ReadRadioSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<RADIO_BLUETOOTH>, get<RADIO_CELL>, get<RADIO_NFC>,
              get<RADIO_WIFI>;

feature ReadOtherSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<SYS_PROP_SETTING_VERSION>, get<SETTINGS_CLASSNAME>;

feature ReadTextEntrySettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<TEXT_AUTO_CAPS>, get<TEXT_AUTO_PUNCTUATE>, get<TEXT_AUTO_REPLACE>,
              get<TEXT_SHOW_PASSWORD>;

feature ReadStorageSettigs[BF]: existence
    action set_flag:
        android.provider.Settings::get<USB_MASS_STORAGE_ENABLED>;

feature ReadVibrateSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<VIBRATE_ON>, get<HAPTIC_FEEDBACK_ENABLED>;

feature ReadAudioSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<VOLUME_ALARM>, get<VOLUME_BLUETOOTH_SCO>, get<VOLUME_MUSIC>,
              get<VOLUME_NOTIFICATION>, get<VOLUME_RING>, get<VOLUME_SYSTEM>, get<VOLUME_VOICE>, get<SOUND_EFFECTS_ENABLED>,
              get<MODE_RINGER_STREAMS_AFFECTED>, get<MUTE_STREAMS_AFFECTED>, get<NOTIFICATION_SOUND>,
              get<APPEND_FOR_LAST_AUDIBLE>;

feature ReadWifiSettings[BF]: existence
    action set_flag:
        android.provider.Settings::get<WIFI_MAX_DHCP_RETRY_COUNT>, get<WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS>,
              get<WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON>, get<WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY>,
              get<WIFI_NUM_OPEN_NETWORKS_KEPT>, get<WIFI_ON>, get<WIFI_SLEEP_POLICY>, get<WIFI_SLEEP_POLICY_DEFAULT>,
              get<WIFI_SLEEP_POLICY_NEVER>, get<WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED>, get<WIFI_STATIC_DNS1>,
              get<WIFI_STATIC_DNS2>, get<WIFI_STATIC_GATEWAY>, get<WIFI_STATIC_IP>, get<WIFI_STATIC_NETMASK>,
              get<WIFI_USE_STATIC_IP>, get<WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE>, get<WIFI_WATCHDOG_AP_COUNT>,
              get<WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS>, get<WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED>,
              get<WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS>, get<WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT>,
              get<WIFI_WATCHDOG_MAX_AP_CHECKS>, get<WIFI_WATCHDOG_ON>, get<WIFI_WATCHDOG_PING_COUNT>,
              get<WIFI_WATCHDOG_PING_DELAY_MS>, get<WIFI_WATCHDOG_PING_TIMEOUT_MS>;

feature WriteRotationSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<ACCELEROMETER_ROTATION>, put<USER_ROTATION>;

feature WriteDebugSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<ADB_ENABLED>, put<DEBUG_APP>, put<WAIT_FOR_DEBUGGER>;

feature WriteAirplaneModeSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<AIRPLANE_MODE_ON>, put<AIRPLANE_MODE_RADIOS>;

feature WriteAlarmSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<ALARM_ALERT>, put<NEXT_ALARM_FORMATTED>;

feature WriteRuntimeSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<ALWAYS_FINISH_ACTIVITIES>;

feature WriteDeviceIdSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<ANDROID_ID>, put<LOGGING_ID>;

feature WriteUISettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<ANIMATOR_DURATION_SCALE>, put<WINDOW_ANIMATION_SCALE>,
              put<FONT_SCALE>, put<SCREEN_BRIGHTNESS>, put<SCREEN_BRIGHTNESS_MODE>, put<SCREEN_BRIGHTNESS_MODE_AUTOMATIC>,
              put<SCREEN_BRIGHTNESS_MODE_MANUAL>, put<SCREEN_OFF_TIMEOUT>, put<DIM_SCREEN>, put<TRANSITION_ANIMATION_SCALE>,
              put<STAY_ON_WHILE_PLUGGED_IN>, put<WALLPAPER_ACTIVITY>, put<SHOW_PROCESSES>, put<SHOW_WEB_SUGGESTIONS>,
              put<SHOW_GTALK_SERVICE_STATUS>, put<USE_GOOGLE_MAIL>;

feature WriteDateTimeSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<AUTO_TIME>, put<AUTO_TIME_ZONE>, put<DATE_FORMAT>,
              put<TIME_12_24>;

feature WriteBluetoothSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<BLUETOOTH_DISCOVERABILITY>, put<BLUETOOTH_DISCOVERABILITY_TIMEOUT>,
              put<BLUETOOTH_ON>;

feature WriteDeviceInitializationSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<DEVICE_PROVISIONED>, put<SETUP_WIZARD_HAS_RUN>;

feature WriteDialerSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<DTMF_TONE_WHEN_DIALING>, put<END_BUTTON_BEHAVIOR>,
              put<RINGTONE>, put<MODE_RINGER>;

feature WriteAppMarketSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<INSTALL_NON_MARKET_APPS>;

feature WriteLocationSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<LOCATION_PROVIDERS_ALLOWED>;

feature WriteScreenLockSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<LOCK_PATTERN_ENABLED>, put<LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED>,
              put<LOCK_PATTERN_VISIBLE>;

feature WriteNetworkSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<NETWORK_PREFERENCE>, put<DATA_ROAMING>, put<HTTP_PROXY>;

feature WriteParentalControlSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<PARENTAL_CONTROL_ENABLED>, put<PARENTAL_CONTROL_LAST_UPDATE>,
              put<PARENTAL_CONTROL_REDIRECT_URL>;

feature WriteRadioSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<RADIO_BLUETOOTH>, put<RADIO_CELL>, put<RADIO_NFC>,
              put<RADIO_WIFI>;

feature WriteOtherSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<SYS_PROP_SETTING_VERSION>, put<SETTINGS_CLASSNAME>;

feature WriteTextEntrySettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<TEXT_AUTO_CAPS>, put<TEXT_AUTO_PUNCTUATE>, put<TEXT_AUTO_REPLACE>,
              put<TEXT_SHOW_PASSWORD>;

feature WriteStorageSettigs[BF]: existence
    action set_flag:
        android.provider.Settings::put<USB_MASS_STORAGE_ENABLED>;

feature WriteVibrateSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<VIBRATE_ON>, put<HAPTIC_FEEDBACK_ENABLED>;

feature WriteAudioSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<VOLUME_ALARM>, put<VOLUME_BLUETOOTH_SCO>, put<VOLUME_MUSIC>,
              put<VOLUME_NOTIFICATION>, put<VOLUME_RING>, put<VOLUME_SYSTEM>, put<VOLUME_VOICE>, put<SOUND_EFFECTS_ENABLED>,
              put<MODE_RINGER_STREAMS_AFFECTED>, put<MUTE_STREAMS_AFFECTED>, put<NOTIFICATION_SOUND>,
              put<APPEND_FOR_LAST_AUDIBLE>;

feature WriteWifiSettings[BF]: existence
    action set_flag:
        android.provider.Settings::put<WIFI_MAX_DHCP_RETRY_COUNT>, put<WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS>,
              put<WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON>, put<WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY>,
              put<WIFI_NUM_OPEN_NETWORKS_KEPT>, put<WIFI_ON>, put<WIFI_SLEEP_POLICY>, put<WIFI_SLEEP_POLICY_DEFAULT>,
              put<WIFI_SLEEP_POLICY_NEVER>, put<WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED>, put<WIFI_STATIC_DNS1>,
              put<WIFI_STATIC_DNS2>, put<WIFI_STATIC_GATEWAY>, put<WIFI_STATIC_IP>, put<WIFI_STATIC_NETMASK>,
              put<WIFI_USE_STATIC_IP>, put<WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE>, put<WIFI_WATCHDOG_AP_COUNT>,
              put<WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS>, put<WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED>,
              put<WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS>, put<WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT>,
              put<WIFI_WATCHDOG_MAX_AP_CHECKS>, put<WIFI_WATCHDOG_ON>, put<WIFI_WATCHDOG_PING_COUNT>,
              put<WIFI_WATCHDOG_PING_DELAY_MS>, put<WIFI_WATCHDOG_PING_TIMEOUT_MS>;
